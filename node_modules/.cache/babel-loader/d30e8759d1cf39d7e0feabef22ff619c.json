{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n(function () {\n  'use strict';\n  /**\r\n   * Class constructor for Spinner MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   * @constructor\r\n   */\n\n  var MaterialSpinner = function MaterialSpinner(element) {\n    this.element_ = element; // Initialize instance.\n\n    this.init();\n  };\n\n  window['MaterialSpinner'] = MaterialSpinner;\n  /**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\n\n  MaterialSpinner.prototype.Constant_ = {\n    MDL_SPINNER_LAYER_COUNT: 4\n  };\n  /**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n  MaterialSpinner.prototype.CssClasses_ = {\n    MDL_SPINNER_LAYER: 'mdl-spinner__layer',\n    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',\n    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',\n    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',\n    MDL_SPINNER_LEFT: 'mdl-spinner__left',\n    MDL_SPINNER_RIGHT: 'mdl-spinner__right'\n  };\n  /**\r\n   * Auxiliary method to create a spinner layer.\r\n   *\r\n   * @param {number} index Index of the layer to be created.\r\n   * @public\r\n   */\n\n  MaterialSpinner.prototype.createLayer = function (index) {\n    var layer = document.createElement('div');\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);\n    var leftClipper = document.createElement('div');\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);\n    var gapPatch = document.createElement('div');\n    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);\n    var rightClipper = document.createElement('div');\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);\n    var circleOwners = [leftClipper, gapPatch, rightClipper];\n\n    for (var i = 0; i < circleOwners.length; i++) {\n      var circle = document.createElement('div');\n      circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);\n      circleOwners[i].appendChild(circle);\n    }\n\n    layer.appendChild(leftClipper);\n    layer.appendChild(gapPatch);\n    layer.appendChild(rightClipper);\n    this.element_.appendChild(layer);\n  };\n\n  MaterialSpinner.prototype['createLayer'] = MaterialSpinner.prototype.createLayer;\n  /**\r\n   * Stops the spinner animation.\r\n   * Public method for users who need to stop the spinner for any reason.\r\n   *\r\n   * @public\r\n   */\n\n  MaterialSpinner.prototype.stop = function () {\n    this.element_.classList.remove('is-active');\n  };\n\n  MaterialSpinner.prototype['stop'] = MaterialSpinner.prototype.stop;\n  /**\r\n   * Starts the spinner animation.\r\n   * Public method for users who need to manually start the spinner for any reason\r\n   * (instead of just adding the 'is-active' class to their markup).\r\n   *\r\n   * @public\r\n   */\n\n  MaterialSpinner.prototype.start = function () {\n    this.element_.classList.add('is-active');\n  };\n\n  MaterialSpinner.prototype['start'] = MaterialSpinner.prototype.start;\n  /**\r\n   * Initialize element.\r\n   */\n\n  MaterialSpinner.prototype.init = function () {\n    if (this.element_) {\n      for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {\n        this.createLayer(i);\n      }\n\n      this.element_.classList.add('is-upgraded');\n    }\n  }; // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n\n\n  componentHandler.register({\n    constructor: MaterialSpinner,\n    classAsString: 'MaterialSpinner',\n    cssClass: 'mdl-js-spinner',\n    widget: true\n  });\n})();","map":{"version":3,"sources":["E:/workout-buddy/node_modules/material-design-lite/src/spinner/spinner.js"],"names":["MaterialSpinner","element","element_","init","window","prototype","Constant_","MDL_SPINNER_LAYER_COUNT","CssClasses_","MDL_SPINNER_LAYER","MDL_SPINNER_CIRCLE_CLIPPER","MDL_SPINNER_CIRCLE","MDL_SPINNER_GAP_PATCH","MDL_SPINNER_LEFT","MDL_SPINNER_RIGHT","createLayer","index","layer","document","createElement","classList","add","leftClipper","gapPatch","rightClipper","circleOwners","i","length","circle","appendChild","stop","remove","start","componentHandler","register","constructor","classAsString","cssClass","widget"],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n(function() {\r\n  'use strict';\r\n\r\n  /**\r\n   * Class constructor for Spinner MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   * @constructor\r\n   */\r\n  var MaterialSpinner = function MaterialSpinner(element) {\r\n    this.element_ = element;\r\n\r\n    // Initialize instance.\r\n    this.init();\r\n  };\r\n  window['MaterialSpinner'] = MaterialSpinner;\r\n\r\n  /**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\n  MaterialSpinner.prototype.Constant_ = {\r\n    MDL_SPINNER_LAYER_COUNT: 4\r\n  };\r\n\r\n  /**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\n  MaterialSpinner.prototype.CssClasses_ = {\r\n    MDL_SPINNER_LAYER: 'mdl-spinner__layer',\r\n    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',\r\n    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',\r\n    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',\r\n    MDL_SPINNER_LEFT: 'mdl-spinner__left',\r\n    MDL_SPINNER_RIGHT: 'mdl-spinner__right'\r\n  };\r\n\r\n  /**\r\n   * Auxiliary method to create a spinner layer.\r\n   *\r\n   * @param {number} index Index of the layer to be created.\r\n   * @public\r\n   */\r\n  MaterialSpinner.prototype.createLayer = function(index) {\r\n    var layer = document.createElement('div');\r\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);\r\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);\r\n\r\n    var leftClipper = document.createElement('div');\r\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\r\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);\r\n\r\n    var gapPatch = document.createElement('div');\r\n    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);\r\n\r\n    var rightClipper = document.createElement('div');\r\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\r\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);\r\n\r\n    var circleOwners = [leftClipper, gapPatch, rightClipper];\r\n\r\n    for (var i = 0; i < circleOwners.length; i++) {\r\n      var circle = document.createElement('div');\r\n      circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);\r\n      circleOwners[i].appendChild(circle);\r\n    }\r\n\r\n    layer.appendChild(leftClipper);\r\n    layer.appendChild(gapPatch);\r\n    layer.appendChild(rightClipper);\r\n\r\n    this.element_.appendChild(layer);\r\n  };\r\n  MaterialSpinner.prototype['createLayer'] =\r\n      MaterialSpinner.prototype.createLayer;\r\n\r\n  /**\r\n   * Stops the spinner animation.\r\n   * Public method for users who need to stop the spinner for any reason.\r\n   *\r\n   * @public\r\n   */\r\n  MaterialSpinner.prototype.stop = function() {\r\n    this.element_.classList.remove('is-active');\r\n  };\r\n  MaterialSpinner.prototype['stop'] = MaterialSpinner.prototype.stop;\r\n\r\n  /**\r\n   * Starts the spinner animation.\r\n   * Public method for users who need to manually start the spinner for any reason\r\n   * (instead of just adding the 'is-active' class to their markup).\r\n   *\r\n   * @public\r\n   */\r\n  MaterialSpinner.prototype.start = function() {\r\n    this.element_.classList.add('is-active');\r\n  };\r\n  MaterialSpinner.prototype['start'] = MaterialSpinner.prototype.start;\r\n\r\n  /**\r\n   * Initialize element.\r\n   */\r\n  MaterialSpinner.prototype.init = function() {\r\n    if (this.element_) {\r\n      for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {\r\n        this.createLayer(i);\r\n      }\r\n\r\n      this.element_.classList.add('is-upgraded');\r\n    }\r\n  };\r\n\r\n  // The component registers itself. It can assume componentHandler is available\r\n  // in the global scope.\r\n  componentHandler.register({\r\n    constructor: MaterialSpinner,\r\n    classAsString: 'MaterialSpinner',\r\n    cssClass: 'mdl-js-spinner',\r\n    widget: true\r\n  });\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}