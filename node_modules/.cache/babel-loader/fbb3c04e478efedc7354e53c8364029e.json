{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n(function () {\n  'use strict';\n  /**\r\n   * Class constructor for Progress MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\n\n  var MaterialProgress = function MaterialProgress(element) {\n    this.element_ = element; // Initialize instance.\n\n    this.init();\n  };\n\n  window['MaterialProgress'] = MaterialProgress;\n  /**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\n\n  MaterialProgress.prototype.Constant_ = {};\n  /**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n  MaterialProgress.prototype.CssClasses_ = {\n    INDETERMINATE_CLASS: 'mdl-progress__indeterminate'\n  };\n  /**\r\n   * Set the current progress of the progressbar.\r\n   *\r\n   * @param {number} p Percentage of the progress (0-100)\r\n   * @public\r\n   */\n\n  MaterialProgress.prototype.setProgress = function (p) {\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\n      return;\n    }\n\n    this.progressbar_.style.width = p + '%';\n  };\n\n  MaterialProgress.prototype['setProgress'] = MaterialProgress.prototype.setProgress;\n  /**\r\n   * Set the current progress of the buffer.\r\n   *\r\n   * @param {number} p Percentage of the buffer (0-100)\r\n   * @public\r\n   */\n\n  MaterialProgress.prototype.setBuffer = function (p) {\n    this.bufferbar_.style.width = p + '%';\n    this.auxbar_.style.width = 100 - p + '%';\n  };\n\n  MaterialProgress.prototype['setBuffer'] = MaterialProgress.prototype.setBuffer;\n  /**\r\n   * Initialize element.\r\n   */\n\n  MaterialProgress.prototype.init = function () {\n    if (this.element_) {\n      var el = document.createElement('div');\n      el.className = 'progressbar bar bar1';\n      this.element_.appendChild(el);\n      this.progressbar_ = el;\n      el = document.createElement('div');\n      el.className = 'bufferbar bar bar2';\n      this.element_.appendChild(el);\n      this.bufferbar_ = el;\n      el = document.createElement('div');\n      el.className = 'auxbar bar bar3';\n      this.element_.appendChild(el);\n      this.auxbar_ = el;\n      this.progressbar_.style.width = '0%';\n      this.bufferbar_.style.width = '100%';\n      this.auxbar_.style.width = '0%';\n      this.element_.classList.add('is-upgraded');\n    }\n  }; // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n\n\n  componentHandler.register({\n    constructor: MaterialProgress,\n    classAsString: 'MaterialProgress',\n    cssClass: 'mdl-js-progress',\n    widget: true\n  });\n})();","map":{"version":3,"sources":["E:/workout-buddy/node_modules/material-design-lite/src/progress/progress.js"],"names":["MaterialProgress","element","element_","init","window","prototype","Constant_","CssClasses_","INDETERMINATE_CLASS","setProgress","p","classList","contains","progressbar_","style","width","setBuffer","bufferbar_","auxbar_","el","document","createElement","className","appendChild","add","componentHandler","register","constructor","classAsString","cssClass","widget"],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n(function() {\r\n  'use strict';\r\n\r\n  /**\r\n   * Class constructor for Progress MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\n  var MaterialProgress = function MaterialProgress(element) {\r\n    this.element_ = element;\r\n\r\n    // Initialize instance.\r\n    this.init();\r\n  };\r\n  window['MaterialProgress'] = MaterialProgress;\r\n\r\n  /**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\n  MaterialProgress.prototype.Constant_ = {\r\n  };\r\n\r\n  /**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\n  MaterialProgress.prototype.CssClasses_ = {\r\n    INDETERMINATE_CLASS: 'mdl-progress__indeterminate'\r\n  };\r\n\r\n  /**\r\n   * Set the current progress of the progressbar.\r\n   *\r\n   * @param {number} p Percentage of the progress (0-100)\r\n   * @public\r\n   */\r\n  MaterialProgress.prototype.setProgress = function(p) {\r\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\r\n      return;\r\n    }\r\n\r\n    this.progressbar_.style.width = p + '%';\r\n  };\r\n  MaterialProgress.prototype['setProgress'] =\r\n      MaterialProgress.prototype.setProgress;\r\n\r\n  /**\r\n   * Set the current progress of the buffer.\r\n   *\r\n   * @param {number} p Percentage of the buffer (0-100)\r\n   * @public\r\n   */\r\n  MaterialProgress.prototype.setBuffer = function(p) {\r\n    this.bufferbar_.style.width = p + '%';\r\n    this.auxbar_.style.width = (100 - p) + '%';\r\n  };\r\n  MaterialProgress.prototype['setBuffer'] =\r\n      MaterialProgress.prototype.setBuffer;\r\n\r\n  /**\r\n   * Initialize element.\r\n   */\r\n  MaterialProgress.prototype.init = function() {\r\n    if (this.element_) {\r\n      var el = document.createElement('div');\r\n      el.className = 'progressbar bar bar1';\r\n      this.element_.appendChild(el);\r\n      this.progressbar_ = el;\r\n\r\n      el = document.createElement('div');\r\n      el.className = 'bufferbar bar bar2';\r\n      this.element_.appendChild(el);\r\n      this.bufferbar_ = el;\r\n\r\n      el = document.createElement('div');\r\n      el.className = 'auxbar bar bar3';\r\n      this.element_.appendChild(el);\r\n      this.auxbar_ = el;\r\n\r\n      this.progressbar_.style.width = '0%';\r\n      this.bufferbar_.style.width = '100%';\r\n      this.auxbar_.style.width = '0%';\r\n\r\n      this.element_.classList.add('is-upgraded');\r\n    }\r\n  };\r\n\r\n  // The component registers itself. It can assume componentHandler is available\r\n  // in the global scope.\r\n  componentHandler.register({\r\n    constructor: MaterialProgress,\r\n    classAsString: 'MaterialProgress',\r\n    cssClass: 'mdl-js-progress',\r\n    widget: true\r\n  });\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}