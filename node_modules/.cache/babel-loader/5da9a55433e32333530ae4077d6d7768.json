{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n(function () {\n  'use strict';\n  /**\r\n   * Class constructor for Textfield MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\n\n  var MaterialTextfield = function MaterialTextfield(element) {\n    this.element_ = element;\n    this.maxRows = this.Constant_.NO_MAX_ROWS; // Initialize instance.\n\n    this.init();\n  };\n\n  window['MaterialTextfield'] = MaterialTextfield;\n  /**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\n\n  MaterialTextfield.prototype.Constant_ = {\n    NO_MAX_ROWS: -1,\n    MAX_ROWS_ATTRIBUTE: 'maxrows'\n  };\n  /**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n  MaterialTextfield.prototype.CssClasses_ = {\n    LABEL: 'mdl-textfield__label',\n    INPUT: 'mdl-textfield__input',\n    IS_DIRTY: 'is-dirty',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_INVALID: 'is-invalid',\n    IS_UPGRADED: 'is-upgraded',\n    HAS_PLACEHOLDER: 'has-placeholder'\n  };\n  /**\r\n   * Handle input being entered.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\n\n  MaterialTextfield.prototype.onKeyDown_ = function (event) {\n    var currentRowCount = event.target.value.split('\\n').length;\n\n    if (event.keyCode === 13) {\n      if (currentRowCount >= this.maxRows) {\n        event.preventDefault();\n      }\n    }\n  };\n  /**\r\n   * Handle focus.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\n\n\n  MaterialTextfield.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n  };\n  /**\r\n   * Handle lost focus.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\n\n\n  MaterialTextfield.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n  };\n  /**\r\n   * Handle reset event from out side.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\n\n\n  MaterialTextfield.prototype.onReset_ = function (event) {\n    this.updateClasses_();\n  };\n  /**\r\n   * Handle class updates.\r\n   *\r\n   * @private\r\n   */\n\n\n  MaterialTextfield.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkValidity();\n    this.checkDirty();\n    this.checkFocus();\n  }; // Public methods.\n\n  /**\r\n   * Check the disabled state and update field accordingly.\r\n   *\r\n   * @public\r\n   */\n\n\n  MaterialTextfield.prototype.checkDisabled = function () {\n    if (this.input_.disabled) {\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n  };\n\n  MaterialTextfield.prototype['checkDisabled'] = MaterialTextfield.prototype.checkDisabled;\n  /**\r\n  * Check the focus state and update field accordingly.\r\n  *\r\n  * @public\r\n  */\n\n  MaterialTextfield.prototype.checkFocus = function () {\n    if (Boolean(this.element_.querySelector(':focus'))) {\n      this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n    }\n  };\n\n  MaterialTextfield.prototype['checkFocus'] = MaterialTextfield.prototype.checkFocus;\n  /**\r\n   * Check the validity state and update field accordingly.\r\n   *\r\n   * @public\r\n   */\n\n  MaterialTextfield.prototype.checkValidity = function () {\n    if (this.input_.validity) {\n      if (this.input_.validity.valid) {\n        this.element_.classList.remove(this.CssClasses_.IS_INVALID);\n      } else {\n        this.element_.classList.add(this.CssClasses_.IS_INVALID);\n      }\n    }\n  };\n\n  MaterialTextfield.prototype['checkValidity'] = MaterialTextfield.prototype.checkValidity;\n  /**\r\n   * Check the dirty state and update field accordingly.\r\n   *\r\n   * @public\r\n   */\n\n  MaterialTextfield.prototype.checkDirty = function () {\n    if (this.input_.value && this.input_.value.length > 0) {\n      this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\n    }\n  };\n\n  MaterialTextfield.prototype['checkDirty'] = MaterialTextfield.prototype.checkDirty;\n  /**\r\n   * Disable text field.\r\n   *\r\n   * @public\r\n   */\n\n  MaterialTextfield.prototype.disable = function () {\n    this.input_.disabled = true;\n    this.updateClasses_();\n  };\n\n  MaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;\n  /**\r\n   * Enable text field.\r\n   *\r\n   * @public\r\n   */\n\n  MaterialTextfield.prototype.enable = function () {\n    this.input_.disabled = false;\n    this.updateClasses_();\n  };\n\n  MaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;\n  /**\r\n   * Update text field value.\r\n   *\r\n   * @param {string} value The value to which to set the control (optional).\r\n   * @public\r\n   */\n\n  MaterialTextfield.prototype.change = function (value) {\n    this.input_.value = value || '';\n    this.updateClasses_();\n  };\n\n  MaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;\n  /**\r\n   * Initialize element.\r\n   */\n\n  MaterialTextfield.prototype.init = function () {\n    if (this.element_) {\n      this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\n      this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n\n      if (this.input_) {\n        if (this.input_.hasAttribute(\n        /** @type {string} */\n        this.Constant_.MAX_ROWS_ATTRIBUTE)) {\n          this.maxRows = parseInt(this.input_.getAttribute(\n          /** @type {string} */\n          this.Constant_.MAX_ROWS_ATTRIBUTE), 10);\n\n          if (isNaN(this.maxRows)) {\n            this.maxRows = this.Constant_.NO_MAX_ROWS;\n          }\n        }\n\n        if (this.input_.hasAttribute('placeholder')) {\n          this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);\n        }\n\n        this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\n        this.boundFocusHandler = this.onFocus_.bind(this);\n        this.boundBlurHandler = this.onBlur_.bind(this);\n        this.boundResetHandler = this.onReset_.bind(this);\n        this.input_.addEventListener('input', this.boundUpdateClassesHandler);\n        this.input_.addEventListener('focus', this.boundFocusHandler);\n        this.input_.addEventListener('blur', this.boundBlurHandler);\n        this.input_.addEventListener('reset', this.boundResetHandler);\n\n        if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\n          // TODO: This should handle pasting multi line text.\n          // Currently doesn't.\n          this.boundKeyDownHandler = this.onKeyDown_.bind(this);\n          this.input_.addEventListener('keydown', this.boundKeyDownHandler);\n        }\n\n        var invalid = this.element_.classList.contains(this.CssClasses_.IS_INVALID);\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n\n        if (invalid) {\n          this.element_.classList.add(this.CssClasses_.IS_INVALID);\n        }\n\n        if (this.input_.hasAttribute('autofocus')) {\n          this.element_.focus();\n          this.checkFocus();\n        }\n      }\n    }\n  }; // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n\n\n  componentHandler.register({\n    constructor: MaterialTextfield,\n    classAsString: 'MaterialTextfield',\n    cssClass: 'mdl-js-textfield',\n    widget: true\n  });\n})();","map":{"version":3,"sources":["E:/workout-buddy/node_modules/material-design-lite/src/textfield/textfield.js"],"names":["MaterialTextfield","element","element_","maxRows","Constant_","NO_MAX_ROWS","init","window","prototype","MAX_ROWS_ATTRIBUTE","CssClasses_","LABEL","INPUT","IS_DIRTY","IS_FOCUSED","IS_DISABLED","IS_INVALID","IS_UPGRADED","HAS_PLACEHOLDER","onKeyDown_","event","currentRowCount","target","value","split","length","keyCode","preventDefault","onFocus_","classList","add","onBlur_","remove","onReset_","updateClasses_","checkDisabled","checkValidity","checkDirty","checkFocus","input_","disabled","Boolean","querySelector","validity","valid","disable","enable","change","label_","hasAttribute","parseInt","getAttribute","isNaN","boundUpdateClassesHandler","bind","boundFocusHandler","boundBlurHandler","boundResetHandler","addEventListener","boundKeyDownHandler","invalid","contains","focus","componentHandler","register","constructor","classAsString","cssClass","widget"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,CAAC,YAAW;AACV;AAEA;;;;;;;;;AAQA,MAAIA,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,OAA3B,EAAoC;AAC1D,SAAKC,QAAL,GAAgBD,OAAhB;AACA,SAAKE,OAAL,GAAe,KAAKC,SAAL,CAAeC,WAA9B,CAF0D,CAG1D;;AACA,SAAKC,IAAL;AACD,GALD;;AAMAC,EAAAA,MAAM,CAAC,mBAAD,CAAN,GAA8BP,iBAA9B;AAEA;;;;;;;AAMAA,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4BJ,SAA5B,GAAwC;AACtCC,IAAAA,WAAW,EAAE,CAAC,CADwB;AAEtCI,IAAAA,kBAAkB,EAAE;AAFkB,GAAxC;AAKA;;;;;;;;;AAQAT,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4BE,WAA5B,GAA0C;AACxCC,IAAAA,KAAK,EAAE,sBADiC;AAExCC,IAAAA,KAAK,EAAE,sBAFiC;AAGxCC,IAAAA,QAAQ,EAAE,UAH8B;AAIxCC,IAAAA,UAAU,EAAE,YAJ4B;AAKxCC,IAAAA,WAAW,EAAE,aAL2B;AAMxCC,IAAAA,UAAU,EAAE,YAN4B;AAOxCC,IAAAA,WAAW,EAAE,aAP2B;AAQxCC,IAAAA,eAAe,EAAE;AARuB,GAA1C;AAWA;;;;;;;AAMAlB,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4BW,UAA5B,GAAyC,UAASC,KAAT,EAAgB;AACvD,QAAIC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,KAAnB,CAAyB,IAAzB,EAA+BC,MAArD;;AACA,QAAIL,KAAK,CAACM,OAAN,KAAkB,EAAtB,EAA0B;AACxB,UAAIL,eAAe,IAAI,KAAKlB,OAA5B,EAAqC;AACnCiB,QAAAA,KAAK,CAACO,cAAN;AACD;AACF;AACF,GAPD;AASA;;;;;;;;AAMA3B,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4BoB,QAA5B,GAAuC,UAASR,KAAT,EAAgB;AACrD,SAAKlB,QAAL,CAAc2B,SAAd,CAAwBC,GAAxB,CAA4B,KAAKpB,WAAL,CAAiBI,UAA7C;AACD,GAFD;AAIA;;;;;;;;AAMAd,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4BuB,OAA5B,GAAsC,UAASX,KAAT,EAAgB;AACpD,SAAKlB,QAAL,CAAc2B,SAAd,CAAwBG,MAAxB,CAA+B,KAAKtB,WAAL,CAAiBI,UAAhD;AACD,GAFD;AAIA;;;;;;;;AAMAd,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4ByB,QAA5B,GAAuC,UAASb,KAAT,EAAgB;AACrD,SAAKc,cAAL;AACD,GAFD;AAIA;;;;;;;AAKAlC,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B0B,cAA5B,GAA6C,YAAW;AACtD,SAAKC,aAAL;AACA,SAAKC,aAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACD,GALD,CAnGU,CA0GV;;AAEA;;;;;;;AAKAtC,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B2B,aAA5B,GAA4C,YAAW;AACrD,QAAI,KAAKI,MAAL,CAAYC,QAAhB,EAA0B;AACxB,WAAKtC,QAAL,CAAc2B,SAAd,CAAwBC,GAAxB,CAA4B,KAAKpB,WAAL,CAAiBK,WAA7C;AACD,KAFD,MAEO;AACL,WAAKb,QAAL,CAAc2B,SAAd,CAAwBG,MAAxB,CAA+B,KAAKtB,WAAL,CAAiBK,WAAhD;AACD;AACF,GAND;;AAOAf,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B,eAA5B,IACIR,iBAAiB,CAACQ,SAAlB,CAA4B2B,aADhC;AAGA;;;;;;AAKAnC,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B8B,UAA5B,GAAyC,YAAW;AAClD,QAAIG,OAAO,CAAC,KAAKvC,QAAL,CAAcwC,aAAd,CAA4B,QAA5B,CAAD,CAAX,EAAoD;AAClD,WAAKxC,QAAL,CAAc2B,SAAd,CAAwBC,GAAxB,CAA4B,KAAKpB,WAAL,CAAiBI,UAA7C;AACD,KAFD,MAEO;AACL,WAAKZ,QAAL,CAAc2B,SAAd,CAAwBG,MAAxB,CAA+B,KAAKtB,WAAL,CAAiBI,UAAhD;AACD;AACF,GAND;;AAOAd,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B,YAA5B,IACER,iBAAiB,CAACQ,SAAlB,CAA4B8B,UAD9B;AAGA;;;;;;AAKAtC,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B4B,aAA5B,GAA4C,YAAW;AACrD,QAAI,KAAKG,MAAL,CAAYI,QAAhB,EAA0B;AACxB,UAAI,KAAKJ,MAAL,CAAYI,QAAZ,CAAqBC,KAAzB,EAAgC;AAC9B,aAAK1C,QAAL,CAAc2B,SAAd,CAAwBG,MAAxB,CAA+B,KAAKtB,WAAL,CAAiBM,UAAhD;AACD,OAFD,MAEO;AACL,aAAKd,QAAL,CAAc2B,SAAd,CAAwBC,GAAxB,CAA4B,KAAKpB,WAAL,CAAiBM,UAA7C;AACD;AACF;AACF,GARD;;AASAhB,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B,eAA5B,IACIR,iBAAiB,CAACQ,SAAlB,CAA4B4B,aADhC;AAGA;;;;;;AAKApC,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B6B,UAA5B,GAAyC,YAAW;AAClD,QAAI,KAAKE,MAAL,CAAYhB,KAAZ,IAAqB,KAAKgB,MAAL,CAAYhB,KAAZ,CAAkBE,MAAlB,GAA2B,CAApD,EAAuD;AACrD,WAAKvB,QAAL,CAAc2B,SAAd,CAAwBC,GAAxB,CAA4B,KAAKpB,WAAL,CAAiBG,QAA7C;AACD,KAFD,MAEO;AACL,WAAKX,QAAL,CAAc2B,SAAd,CAAwBG,MAAxB,CAA+B,KAAKtB,WAAL,CAAiBG,QAAhD;AACD;AACF,GAND;;AAOAb,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B,YAA5B,IACIR,iBAAiB,CAACQ,SAAlB,CAA4B6B,UADhC;AAGA;;;;;;AAKArC,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4BqC,OAA5B,GAAsC,YAAW;AAC/C,SAAKN,MAAL,CAAYC,QAAZ,GAAuB,IAAvB;AACA,SAAKN,cAAL;AACD,GAHD;;AAIAlC,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B,SAA5B,IAAyCR,iBAAiB,CAACQ,SAAlB,CAA4BqC,OAArE;AAEA;;;;;;AAKA7C,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4BsC,MAA5B,GAAqC,YAAW;AAC9C,SAAKP,MAAL,CAAYC,QAAZ,GAAuB,KAAvB;AACA,SAAKN,cAAL;AACD,GAHD;;AAIAlC,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B,QAA5B,IAAwCR,iBAAiB,CAACQ,SAAlB,CAA4BsC,MAApE;AAEA;;;;;;;AAMA9C,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4BuC,MAA5B,GAAqC,UAASxB,KAAT,EAAgB;AAEnD,SAAKgB,MAAL,CAAYhB,KAAZ,GAAoBA,KAAK,IAAI,EAA7B;AACA,SAAKW,cAAL;AACD,GAJD;;AAKAlC,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4B,QAA5B,IAAwCR,iBAAiB,CAACQ,SAAlB,CAA4BuC,MAApE;AAEA;;;;AAGA/C,EAAAA,iBAAiB,CAACQ,SAAlB,CAA4BF,IAA5B,GAAmC,YAAW;AAE5C,QAAI,KAAKJ,QAAT,EAAmB;AACjB,WAAK8C,MAAL,GAAc,KAAK9C,QAAL,CAAcwC,aAAd,CAA4B,MAAM,KAAKhC,WAAL,CAAiBC,KAAnD,CAAd;AACA,WAAK4B,MAAL,GAAc,KAAKrC,QAAL,CAAcwC,aAAd,CAA4B,MAAM,KAAKhC,WAAL,CAAiBE,KAAnD,CAAd;;AAEA,UAAI,KAAK2B,MAAT,EAAiB;AACf,YAAI,KAAKA,MAAL,CAAYU,YAAZ;AACE;AAAuB,aAAK7C,SAAL,CAAeK,kBADxC,CAAJ,EACkE;AAChE,eAAKN,OAAL,GAAe+C,QAAQ,CAAC,KAAKX,MAAL,CAAYY,YAAZ;AACpB;AAAuB,eAAK/C,SAAL,CAAeK,kBADlB,CAAD,EACyC,EADzC,CAAvB;;AAEA,cAAI2C,KAAK,CAAC,KAAKjD,OAAN,CAAT,EAAyB;AACvB,iBAAKA,OAAL,GAAe,KAAKC,SAAL,CAAeC,WAA9B;AACD;AACF;;AAED,YAAI,KAAKkC,MAAL,CAAYU,YAAZ,CAAyB,aAAzB,CAAJ,EAA6C;AAC3C,eAAK/C,QAAL,CAAc2B,SAAd,CAAwBC,GAAxB,CAA4B,KAAKpB,WAAL,CAAiBQ,eAA7C;AACD;;AAED,aAAKmC,yBAAL,GAAiC,KAAKnB,cAAL,CAAoBoB,IAApB,CAAyB,IAAzB,CAAjC;AACA,aAAKC,iBAAL,GAAyB,KAAK3B,QAAL,CAAc0B,IAAd,CAAmB,IAAnB,CAAzB;AACA,aAAKE,gBAAL,GAAwB,KAAKzB,OAAL,CAAauB,IAAb,CAAkB,IAAlB,CAAxB;AACA,aAAKG,iBAAL,GAAyB,KAAKxB,QAAL,CAAcqB,IAAd,CAAmB,IAAnB,CAAzB;AACA,aAAKf,MAAL,CAAYmB,gBAAZ,CAA6B,OAA7B,EAAsC,KAAKL,yBAA3C;AACA,aAAKd,MAAL,CAAYmB,gBAAZ,CAA6B,OAA7B,EAAsC,KAAKH,iBAA3C;AACA,aAAKhB,MAAL,CAAYmB,gBAAZ,CAA6B,MAA7B,EAAqC,KAAKF,gBAA1C;AACA,aAAKjB,MAAL,CAAYmB,gBAAZ,CAA6B,OAA7B,EAAsC,KAAKD,iBAA3C;;AAEA,YAAI,KAAKtD,OAAL,KAAiB,KAAKC,SAAL,CAAeC,WAApC,EAAiD;AAC/C;AACA;AACA,eAAKsD,mBAAL,GAA2B,KAAKxC,UAAL,CAAgBmC,IAAhB,CAAqB,IAArB,CAA3B;AACA,eAAKf,MAAL,CAAYmB,gBAAZ,CAA6B,SAA7B,EAAwC,KAAKC,mBAA7C;AACD;;AACD,YAAIC,OAAO,GAAG,KAAK1D,QAAL,CAAc2B,SAAd,CACXgC,QADW,CACF,KAAKnD,WAAL,CAAiBM,UADf,CAAd;AAEA,aAAKkB,cAAL;AACA,aAAKhC,QAAL,CAAc2B,SAAd,CAAwBC,GAAxB,CAA4B,KAAKpB,WAAL,CAAiBO,WAA7C;;AACA,YAAI2C,OAAJ,EAAa;AACX,eAAK1D,QAAL,CAAc2B,SAAd,CAAwBC,GAAxB,CAA4B,KAAKpB,WAAL,CAAiBM,UAA7C;AACD;;AACD,YAAI,KAAKuB,MAAL,CAAYU,YAAZ,CAAyB,WAAzB,CAAJ,EAA2C;AACzC,eAAK/C,QAAL,CAAc4D,KAAd;AACA,eAAKxB,UAAL;AACD;AACF;AACF;AACF,GAhDD,CAhNU,CAkQV;AACA;;;AACAyB,EAAAA,gBAAgB,CAACC,QAAjB,CAA0B;AACxBC,IAAAA,WAAW,EAAEjE,iBADW;AAExBkE,IAAAA,aAAa,EAAE,mBAFS;AAGxBC,IAAAA,QAAQ,EAAE,kBAHc;AAIxBC,IAAAA,MAAM,EAAE;AAJgB,GAA1B;AAMD,CA1QD","sourcesContent":["/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n(function() {\r\n  'use strict';\r\n\r\n  /**\r\n   * Class constructor for Textfield MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\n  var MaterialTextfield = function MaterialTextfield(element) {\r\n    this.element_ = element;\r\n    this.maxRows = this.Constant_.NO_MAX_ROWS;\r\n    // Initialize instance.\r\n    this.init();\r\n  };\r\n  window['MaterialTextfield'] = MaterialTextfield;\r\n\r\n  /**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\n  MaterialTextfield.prototype.Constant_ = {\r\n    NO_MAX_ROWS: -1,\r\n    MAX_ROWS_ATTRIBUTE: 'maxrows'\r\n  };\r\n\r\n  /**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\n  MaterialTextfield.prototype.CssClasses_ = {\r\n    LABEL: 'mdl-textfield__label',\r\n    INPUT: 'mdl-textfield__input',\r\n    IS_DIRTY: 'is-dirty',\r\n    IS_FOCUSED: 'is-focused',\r\n    IS_DISABLED: 'is-disabled',\r\n    IS_INVALID: 'is-invalid',\r\n    IS_UPGRADED: 'is-upgraded',\r\n    HAS_PLACEHOLDER: 'has-placeholder'\r\n  };\r\n\r\n  /**\r\n   * Handle input being entered.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\n  MaterialTextfield.prototype.onKeyDown_ = function(event) {\r\n    var currentRowCount = event.target.value.split('\\n').length;\r\n    if (event.keyCode === 13) {\r\n      if (currentRowCount >= this.maxRows) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle focus.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\n  MaterialTextfield.prototype.onFocus_ = function(event) {\r\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\r\n  };\r\n\r\n  /**\r\n   * Handle lost focus.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\n  MaterialTextfield.prototype.onBlur_ = function(event) {\r\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\r\n  };\r\n\r\n  /**\r\n   * Handle reset event from out side.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\n  MaterialTextfield.prototype.onReset_ = function(event) {\r\n    this.updateClasses_();\r\n  };\r\n\r\n  /**\r\n   * Handle class updates.\r\n   *\r\n   * @private\r\n   */\r\n  MaterialTextfield.prototype.updateClasses_ = function() {\r\n    this.checkDisabled();\r\n    this.checkValidity();\r\n    this.checkDirty();\r\n    this.checkFocus();\r\n  };\r\n\r\n  // Public methods.\r\n\r\n  /**\r\n   * Check the disabled state and update field accordingly.\r\n   *\r\n   * @public\r\n   */\r\n  MaterialTextfield.prototype.checkDisabled = function() {\r\n    if (this.input_.disabled) {\r\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\r\n    } else {\r\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\r\n    }\r\n  };\r\n  MaterialTextfield.prototype['checkDisabled'] =\r\n      MaterialTextfield.prototype.checkDisabled;\r\n\r\n  /**\r\n  * Check the focus state and update field accordingly.\r\n  *\r\n  * @public\r\n  */\r\n  MaterialTextfield.prototype.checkFocus = function() {\r\n    if (Boolean(this.element_.querySelector(':focus'))) {\r\n      this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\r\n    } else {\r\n      this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\r\n    }\r\n  };\r\n  MaterialTextfield.prototype['checkFocus'] =\r\n    MaterialTextfield.prototype.checkFocus;\r\n\r\n  /**\r\n   * Check the validity state and update field accordingly.\r\n   *\r\n   * @public\r\n   */\r\n  MaterialTextfield.prototype.checkValidity = function() {\r\n    if (this.input_.validity) {\r\n      if (this.input_.validity.valid) {\r\n        this.element_.classList.remove(this.CssClasses_.IS_INVALID);\r\n      } else {\r\n        this.element_.classList.add(this.CssClasses_.IS_INVALID);\r\n      }\r\n    }\r\n  };\r\n  MaterialTextfield.prototype['checkValidity'] =\r\n      MaterialTextfield.prototype.checkValidity;\r\n\r\n  /**\r\n   * Check the dirty state and update field accordingly.\r\n   *\r\n   * @public\r\n   */\r\n  MaterialTextfield.prototype.checkDirty = function() {\r\n    if (this.input_.value && this.input_.value.length > 0) {\r\n      this.element_.classList.add(this.CssClasses_.IS_DIRTY);\r\n    } else {\r\n      this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\r\n    }\r\n  };\r\n  MaterialTextfield.prototype['checkDirty'] =\r\n      MaterialTextfield.prototype.checkDirty;\r\n\r\n  /**\r\n   * Disable text field.\r\n   *\r\n   * @public\r\n   */\r\n  MaterialTextfield.prototype.disable = function() {\r\n    this.input_.disabled = true;\r\n    this.updateClasses_();\r\n  };\r\n  MaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;\r\n\r\n  /**\r\n   * Enable text field.\r\n   *\r\n   * @public\r\n   */\r\n  MaterialTextfield.prototype.enable = function() {\r\n    this.input_.disabled = false;\r\n    this.updateClasses_();\r\n  };\r\n  MaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;\r\n\r\n  /**\r\n   * Update text field value.\r\n   *\r\n   * @param {string} value The value to which to set the control (optional).\r\n   * @public\r\n   */\r\n  MaterialTextfield.prototype.change = function(value) {\r\n\r\n    this.input_.value = value || '';\r\n    this.updateClasses_();\r\n  };\r\n  MaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;\r\n\r\n  /**\r\n   * Initialize element.\r\n   */\r\n  MaterialTextfield.prototype.init = function() {\r\n\r\n    if (this.element_) {\r\n      this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\r\n      this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\r\n\r\n      if (this.input_) {\r\n        if (this.input_.hasAttribute(\r\n              /** @type {string} */ (this.Constant_.MAX_ROWS_ATTRIBUTE))) {\r\n          this.maxRows = parseInt(this.input_.getAttribute(\r\n              /** @type {string} */ (this.Constant_.MAX_ROWS_ATTRIBUTE)), 10);\r\n          if (isNaN(this.maxRows)) {\r\n            this.maxRows = this.Constant_.NO_MAX_ROWS;\r\n          }\r\n        }\r\n\r\n        if (this.input_.hasAttribute('placeholder')) {\r\n          this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);\r\n        }\r\n\r\n        this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\r\n        this.boundFocusHandler = this.onFocus_.bind(this);\r\n        this.boundBlurHandler = this.onBlur_.bind(this);\r\n        this.boundResetHandler = this.onReset_.bind(this);\r\n        this.input_.addEventListener('input', this.boundUpdateClassesHandler);\r\n        this.input_.addEventListener('focus', this.boundFocusHandler);\r\n        this.input_.addEventListener('blur', this.boundBlurHandler);\r\n        this.input_.addEventListener('reset', this.boundResetHandler);\r\n\r\n        if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\r\n          // TODO: This should handle pasting multi line text.\r\n          // Currently doesn't.\r\n          this.boundKeyDownHandler = this.onKeyDown_.bind(this);\r\n          this.input_.addEventListener('keydown', this.boundKeyDownHandler);\r\n        }\r\n        var invalid = this.element_.classList\r\n          .contains(this.CssClasses_.IS_INVALID);\r\n        this.updateClasses_();\r\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\r\n        if (invalid) {\r\n          this.element_.classList.add(this.CssClasses_.IS_INVALID);\r\n        }\r\n        if (this.input_.hasAttribute('autofocus')) {\r\n          this.element_.focus();\r\n          this.checkFocus();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // The component registers itself. It can assume componentHandler is available\r\n  // in the global scope.\r\n  componentHandler.register({\r\n    constructor: MaterialTextfield,\r\n    classAsString: 'MaterialTextfield',\r\n    cssClass: 'mdl-js-textfield',\r\n    widget: true\r\n  });\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}